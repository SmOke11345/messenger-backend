generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int               @id @default(autoincrement())
  name        String
  lastname    String?
  login       String
  password    String
  profile_img String?
  // Можно использовать при помощи include при поиске данных.
  friends     Friends[]         @relation("friendUsers") // пользователь является другом для других пользователей. (Пользователи которые добавили в друзья)
  friendsOf   Friends[]         @relation("UserFriends") // данные где пользователь является инициатором дружбы. (Пользователи которых добавил сам пользователь)
  messages    Messages[]        @relation("UserMessages")
  memberships ChatMemberships[]
}

model Friends {
  id       Int   @id @default(autoincrement())
  userId   Int // Тот пользователь который добавил.
  friendId Int // id добавленного пользователя.
  user     Users @relation(fields: [userId], references: [id], "UserFriends")
  friend   Users @relation(fields: [friendId], references: [id], "friendUsers")
}

model Messages {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  chatId    Int
  sender    Users    @relation("UserMessages", fields: [senderId], references: [id])
  chat      Chats    @relation("ChatMessages", fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chats {
  id       Int               @id @default(autoincrement())
  messages Messages[]        @relation("ChatMessages")
  members  ChatMemberships[] // Участники чата
}

model ChatMemberships {
  userId Int
  chatId Int
  user   Users @relation(fields: [userId], references: [id])
  chat   Chats @relation(fields: [chatId], references: [id])

  @@id([userId, chatId]) // Указание нескольких первичных ключей
}
